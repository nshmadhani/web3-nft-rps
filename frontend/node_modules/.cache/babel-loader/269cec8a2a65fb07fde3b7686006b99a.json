{"ast":null,"code":"var _jsxFileName = \"/media/nshmadhani/Work/Projects/Blockchain/web3-nft-rps/frontend/src/App.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport EpicRPS from './contracts/contract';\nimport SelectCharacter from './Components/SelectCharacter'; // Constants\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(0);\n  const [userNFT, setUserNFT] = useState(0);\n  const [contractLoaded, setContractLoaded] = useState(false);\n  useEffect(() => {\n    checkIfUserWalletConnected();\n  }, []);\n  useEffect(async () => {\n    const {\n      ethereum\n    } = window;\n    await EpicRPS.load(ethereum);\n    setContractLoaded(true);\n  }, [currentAccount]);\n  useEffect(() => {\n    checkifUserHasMinted();\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(`CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`);\n      checkifUserHasMinted();\n    };\n  }, contractLoaded);\n\n  const checkIfUserWalletConnected = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Please install MetaMask Wallet\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorized account:', account);\n        setCurrentAccount(account);\n      } else {\n        console.log('No authorized account found');\n      }\n    } catch (e) {\n      alert(\"Error Occured while Check if Connected\");\n      console.error(e);\n    }\n  };\n\n  const connectWalletAction = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Please install MetaMask Wallet\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const checkifUserHasMinted = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Please install MetaMask Wallet\");\n        return;\n      }\n\n      const mintedNFT = await EpicRPS.getMintedNFT(currentAccount);\n      console.log(mintedNFT);\n      if (mintedNFT.name) setUserNFT(mintedNFT);\n    } catch (e) {\n      console.log(\"CheckifUserHasMinted\");\n      console.error(e);\n    }\n  };\n\n  const renderMain = () => {\n    console.log(\"Called\");\n\n    if (!currentAccount) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"connect-wallet-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: \"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\",\n        alt: \"Monty Python Gif\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"cta-button connect-wallet-button\",\n        onClick: connectWalletAction,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }\n      }, \"Connect Wallet To Get Started\"));\n    } else if (userNFT) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }\n      }, JSON.stringify(userNFT));\n    } else return /*#__PURE__*/React.createElement(SelectCharacter, {\n      setCharacterNFT: setUserNFT,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 22\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"header gradient-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, \"\\u2694\\uFE0F Metaverse Slayer \\u2694\\uFE0F\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"Team up to protect the Metaverse!\"), renderMain()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Twitter Logo\",\n    className: \"twitter-logo\",\n    src: twitterLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"footer-text\",\n    href: TWITTER_LINK,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, `built with @${TWITTER_HANDLE}`))));\n};\n\nexport default App;","map":{"version":3,"sources":["/media/nshmadhani/Work/Projects/Blockchain/web3-nft-rps/frontend/src/App.jsx"],"names":["React","useEffect","useState","EpicRPS","SelectCharacter","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","userNFT","setUserNFT","contractLoaded","setContractLoaded","checkIfUserWalletConnected","ethereum","window","load","checkifUserHasMinted","onCharacterMint","sender","tokenId","characterIndex","console","log","toNumber","alert","accounts","request","method","length","account","e","error","connectWalletAction","mintedNFT","getMintedNFT","name","renderMain","JSON","stringify","twitterLogo"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport EpicRPS from './contracts/contract';\nimport SelectCharacter from './Components/SelectCharacter';\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\n\n\n\n\n\nconst App = () => {\n\n\n  const [currentAccount, setCurrentAccount] = useState(0);\n  const [userNFT, setUserNFT] = useState(0);\n  const [contractLoaded, setContractLoaded] = useState(false);\n\n  useEffect(() => {\n    checkIfUserWalletConnected();\n  },[]);\n\n  useEffect(async () => {\n\n    const {ethereum} = window;\n    await EpicRPS.load(ethereum);\n    setContractLoaded(true);\n\n  },[currentAccount]);\n\n  useEffect(() => {\n\n    checkifUserHasMinted();\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n      checkifUserHasMinted();\n    };\n\n\n\n\n\n  }, contractLoaded);\n  \n\n  const checkIfUserWalletConnected = async () => {\n\n    try {\n        const {ethereum} =  window;\n        if(!ethereum) {\n          alert(\"Please install MetaMask Wallet\");\n          return;\n        }\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n        if (accounts.length !== 0) {\n              const account = accounts[0];\n              console.log('Found an authorized account:', account);\n              setCurrentAccount(account);\n\n        } else {\n              console.log('No authorized account found');\n        }\n    } catch(e) {\n      alert(\"Error Occured while Check if Connected\");\n      console.error(e);\n    }\n  };\n\n  const connectWalletAction = async () => {\n    try {\n        const {ethereum} =  window;\n        if(!ethereum) {\n          alert(\"Please install MetaMask Wallet\");\n          return;\n        }\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n        console.log('Connected', accounts[0]);\n        setCurrentAccount(accounts[0]);\n    } catch(e) {\n      console.error(e)\n    }\n  };\n\n  const checkifUserHasMinted = async () => {\n    try {\n        const {ethereum} =  window;\n        if(!ethereum) {\n          alert(\"Please install MetaMask Wallet\");\n          return;\n        }\n        const mintedNFT = await EpicRPS.getMintedNFT(currentAccount);\n        console.log(mintedNFT);\n        if(mintedNFT.name) \n          setUserNFT(mintedNFT);\n        \n    } catch(e) {\n      console.log(\"CheckifUserHasMinted\");\n      console.error(e)\n    }\n  }\n\n\n  const renderMain =  () => {\n    console.log(\"Called\");\n    if(!currentAccount) {\n        return (\n           <div className=\"connect-wallet-container\">\n            <img\n              src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n              alt=\"Monty Python Gif\"\n            />\n         \n              <button\n              className=\"cta-button connect-wallet-button\"\n              onClick={connectWalletAction}\n            >\n              Connect Wallet To Get Started\n            </button>  \n          </div>\n        );\n    } else if(userNFT) {\n      return (<div>{JSON.stringify(userNFT)}</div>);\n    } else   return (<SelectCharacter setCharacterNFT={setUserNFT}></SelectCharacter>)\n\n\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\n\n          {renderMain()}\n          \n\n\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}